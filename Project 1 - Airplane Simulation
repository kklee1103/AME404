% Constants
Xu = -0.02;
Xalpha = -0.4;
Zalpha = -0.5;
Zu = -0.25;
Zq = -0.8;
Malpha = -0.6;
Mq = -1.2;
g = 9.81;
U0 = 100;

% Time span
t_span = [0 200];

% Initial conditions
initial_conditions = [1.0; 0.1; 0.2; 0];

% Control input
delta_e = @(t) (t > 0) * 0.1;

% System of ODEs
function dydt = airplane_dynamics(t, y, delta_e, Xu, Xalpha, Zu, Zalpha, Zq, Malpha, Mq, g, U0)
    u_tilde = y(1);
    alpha_tilde = y(2);
    theta_tilde = y(3);
    q = y(4);

    % Define the system
    du_dt = Xu * u_tilde + Xalpha * alpha_tilde - g * theta_tilde;
    dalpha_dt = (Zu/U0) * u_tilde + (Zalpha/U0) * alpha_tilde + (1 + Zq/U0) * q + delta_e(t);
    dtheta_dt = q;
    dq_dt = (Malpha * alpha_tilde + Mq * q) / U0;

    % Return the derivatives
    dydt = [du_dt; dalpha_dt; dtheta_dt; dq_dt];
end

% Part 1
[t, y] = ode45(@(t, y) airplane_dynamics(t, y, delta_e, Xu, Xalpha, Zu, Zalpha, Zq, Malpha, Mq, g, U0), t_span, initial_conditions);

% Plot the results (FIGURE 1)
figure;
subplot(4, 1, 1);
plot(t, y(:,1)); xlabel('Time (s)', 'Interpreter', 'latex'); ylabel('$\tilde{u}$ (m/s)', 'Interpreter', 'latex');
title('Perturbation velocity $\tilde{u}$', 'Interpreter', 'latex');

subplot(4, 1, 2);
plot(t, y(:,2)); xlabel('Time (s)', 'Interpreter', 'latex'); ylabel('$\tilde{\alpha}$ (rad)', 'Interpreter', 'latex');
title('Angle of attack $\tilde{\alpha}$', 'Interpreter', 'latex');

subplot(4, 1, 3);
plot(t, y(:,3)); xlabel('Time (s)', 'Interpreter', 'latex'); ylabel('$\tilde{\theta}$ (rad)', 'Interpreter', 'latex');
title('Pitch angle $\tilde{\theta}$', 'Interpreter', 'latex');

subplot(4, 1, 4);
plot(t, y(:,4)); xlabel('Time (s)', 'Interpreter', 'latex'); ylabel('$q$ (rad/s)', 'Interpreter', 'latex');
title('Pitch rate $q$', 'Interpreter', 'latex');

% Plot (FIGURE 2)
figure;
subplot(4, 1, 1);
plot(t_free, y_free(:,1)); xlabel('Time (s)', 'Interpreter', 'latex'); ylabel('$\tilde{u}$ (m/s)', 'Interpreter', 'latex');
title('Free Response: Perturbation velocity $\tilde{u}$', 'Interpreter', 'latex');

subplot(4, 1, 2);
plot(t_free, y_free(:,2)); xlabel('Time (s)', 'Interpreter', 'latex'); ylabel('$\tilde{\alpha}$ (rad)', 'Interpreter', 'latex');
title('Free Response: Angle of attack $\tilde{\alpha}$', 'Interpreter', 'latex');

subplot(4, 1, 3);
plot(t_free, y_free(:,3)); xlabel('Time (s)', 'Interpreter', 'latex'); ylabel('$\tilde{\theta}$ (rad)', 'Interpreter', 'latex');
title('Free Response: Pitch angle $\tilde{\theta}$', 'Interpreter', 'latex');

subplot(4, 1, 4);
plot(t_free, y_free(:,4)); xlabel('Time (s)', 'Interpreter', 'latex'); ylabel('$q$ (rad/s)', 'Interpreter', 'latex');
title('Free Response: Pitch rate $q$', 'Interpreter', 'latex');

% Part 3a: Eigenvalue analysis
A = [Xu, Xalpha, -g, 0;
     Zu/U0, Zalpha/U0, 0, (1 + Zq/U0);
     0, 0, 0, 1;
     Malpha/U0, Mq/U0, 0, 0]; 

eigenvalues = eig(A); 

% Part 3b: Stability
stability = real(eigenvalues); 
is_stable = all(stability < 0);  

fprintf('Eigenvalues of the system: \n');
disp(eigenvalues);

fprintf('System Stability: \n');
if is_stable
    disp('The system is stable (all eigenvalues have negative real parts).');
else
    disp('The system is unstable (some eigenvalues have positive real parts).');
end

fprintf('Long-period (Phugoid) and Short-period Modes: \n');
long_period_mode = eigenvalues(imag(eigenvalues) > 0 & abs(real(eigenvalues)) < 1); % Identify long-period mode
short_period_mode = eigenvalues(imag(eigenvalues) > 0 & abs(real(eigenvalues)) > 1); % Identify short-period mode

disp('Long-period (Phugoid) Mode Eigenvalues: ');
disp(long_period_mode);

disp('Short-period Mode Eigenvalues: ');
disp(short_period_mode);


% part 3c

fprintf("PART 3C \n")

fprintf('Long-period (Phugoid) Mode Eigenvalues: \n');
disp(long_period_mode);

fprintf('Short-period Mode Eigenvalues: \n');
disp(short_period_mode);

% Calculate and display the periods of the modes
if ~isempty(long_period_mode)
    T_phugoid = 2 * pi / abs(imag(long_period_mode(1)));
    fprintf('Phugoid Mode Period: %.2f seconds\n', T_phugoid);
end

if ~isempty(short_period_mode)
    T_short_period = 2 * pi / abs(imag(short_period_mode(1)));
    fprintf('Short-period Mode Period: %.2f seconds\n', T_short_period);
end


% Constants Mach 0.4 (low speed)
Xu_04 = -0.03;
Xalpha_04 = -0.35;
Zu_04 = -0.28;
Zalpha_04 = -0.55;
Zq_04 = -0.85;
Malpha_04 = -0.65;
Mq_04 = -1.15;
U0_04 = 120;

% Repeat the same for Mach 0.8 
Xu_08 = -0.04;
Xalpha_08 = -0.38;
Zu_08 = -0.30;
Zalpha_08 = -0.60;
Zq_08 = -0.90;
Malpha_08 = -0.70;
Mq_08 = -1.20;
U0_08 = 240;  

% Time span
t_span = [0 200];

% Initial conditions
initial_conditions = [1.0; 0.1; 0.2; 0];

% Define delta_e
delta_e_zero = @(t) 0;

% System of ODEs for Mach 0.4
[t_04, y_04] = ode45(@(t, y) airplane_dynamics(t, y, delta_e_zero, Xu_04, Xalpha_04, Zu_04, Zalpha_04, Zq_04, Malpha_04, Mq_04, g, U0_04), t_span, initial_conditions);

% System of ODEs for Mach 0.8
[t_08, y_08] = ode45(@(t, y) airplane_dynamics(t, y, delta_e_zero, Xu_08, Xalpha_08, Zu_08, Zalpha_08, Zq_08, Malpha_08, Mq_08, g, U0_08), t_span, initial_conditions);

% Eigenvalue analysis for Mach 0.4
A_04 = [Xu_04, Xalpha_04, -g, 0;
        Zu_04/U0_04, Zalpha_04/U0_04, 0, (1 + Zq_04/U0_04);
        0, 0, 0, 1;
        Malpha_04/U0_04, Mq_04/U0_04, 0, 0]; 

eigenvalues_04 = eig(A_04); 

% Eigenvalue analysis for Mach 0.8
A_08 = [Xu_08, Xalpha_08, -g, 0;
        Zu_08/U0_08, Zalpha_08/U0_08, 0, (1 + Zq_08/U0_08);
        0, 0, 0, 1;
        Malpha_08/U0_08, Mq_08/U0_08, 0, 0]; 

eigenvalues_08 = eig(A_08);

% Display Mach 0.4
fprintf('Eigenvalues for Mach 0.4: \n');
disp(eigenvalues_04);
fprintf('System Stability for Mach 0.4: \n');
stability_04 = real(eigenvalues_04);
is_stable_04 = all(stability_04 < 0);
if is_stable_04
    disp('The system is stable (all eigenvalues have negative real parts).');
else
    disp('The system is unstable (some eigenvalues have positive real parts).');
end

% Display Mach 0.8
fprintf('Eigenvalues for Mach 0.8: \n');
disp(eigenvalues_08);
fprintf('System Stability for Mach 0.8: \n');
stability_08 = real(eigenvalues_08);
is_stable_08 = all(stability_08 < 0);
if is_stable_08
    disp('The system is stable (all eigenvalues have negative real parts).');
else
    disp('The system is unstable (some eigenvalues have positive real parts).');
end
